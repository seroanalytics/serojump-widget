# CMakeLists.txt - SeroJump WebAssembly Widget (C++ + WebAssembly)
cmake_minimum_required(VERSION 3.10)
project(SeroJumpWASM)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Source directory
set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src")

# Check if we're building with Emscripten (for WASM) or native (for server)
if(EMSCRIPTEN)
    message(STATUS "ðŸ§¬ Building SeroJump WebAssembly module with Emscripten")
    
    # WebAssembly module
    add_executable(serojump_module "${SOURCE_DIR}/serojump.cpp")
    
    # Enable embind for this target
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --bind")
    
    # Set output directory
    set_target_properties(serojump_module PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/web"
    )
    
    # Set Emscripten link flags for serojump
    set_target_properties(serojump_module PROPERTIES
        LINK_FLAGS "-s WASM=1 \
                    -s 'EXPORTED_RUNTIME_METHODS=[\"ccall\",\"cwrap\"]' \
                    -s 'EXPORTED_FUNCTIONS=[\"_malloc\",\"_free\"]' \
                    -s ALLOW_MEMORY_GROWTH=1 \
                    -s NO_EXIT_RUNTIME=1 \
                    -s MODULARIZE=1 \
                    -s 'EXPORT_NAME=\"createSeroJumpModule\"' \
                    -s STACK_SIZE=1MB \
                    -s TOTAL_MEMORY=64MB \
                    --no-entry"
    )
    
    # Include headers
    target_include_directories(serojump_module PRIVATE "${SOURCE_DIR}")
    
else()
    message(STATUS "ðŸš€ Building native C++ HTTP server for SeroJump")
    
    # Find required packages for the server
    find_package(Threads REQUIRED)
    
    # C++ HTTP Server (reuse existing server.cpp from sir_bayes)
    add_executable(serojump_server "${SOURCE_DIR}/server.cpp")
    
    # Link threads library
    target_link_libraries(serojump_server PRIVATE Threads::Threads)
    
    # Set output directory
    set_target_properties(serojump_server PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
    )
    
    # Enable filesystem library support
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS "9.0")
        target_link_libraries(serojump_server PRIVATE stdc++fs)
    endif()
    
endif()

# Custom target to build both WASM and server
add_custom_target(build_all 
    COMMENT "Building both SeroJump WebAssembly module and C++ server"
)

